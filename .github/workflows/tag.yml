# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tag and Push Template

on:
  workflow_call:
    inputs:
      OLD_IMAGE_NAME:
        required: false
        type: string
        default:  ${{ github.event.repository.name }}
      OLD_IMAGE_TAG:
        required: false
        type: string
        default: "build-${{ github.sha }}"
      NEW_IMAGE_NAME:
        required: false
        type: string
        default:  ${{ github.event.repository.name }}
      NEW_IMAGE_TAG:
        required: false
        type: string
        default: "rc-${{ github.sha }}"
    secrets:
      DOCKERHUB_TOKEN:
        required: true

permissions:
  contents: read

jobs:
  tag:
    name: Tag the Image
    runs-on: ubuntu-latest
    timeout-minutes: 1
    env:
      DOCKERHUB_IMAGE_OLD: "docker.io/${{ vars.DOCKERHUB_USERNAME }}/${{ inputs.OLD_IMAGE_NAME }}:${{ inputs.OLD_IMAGE_TAG }}"
      DOCKERHUB_IMAGE_NEW: "docker.io/${{ vars.DOCKERHUB_USERNAME }}/${{ inputs.NEW_IMAGE_NAME }}:${{ inputs.NEW_IMAGE_TAG }}"
      DOCKERHUB_IMAGE_LATEST: "docker.io/${{ vars.DOCKERHUB_USERNAME }}/${{ inputs.NEW_IMAGE_NAME }}:latest"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login in DockerHub
        run: |
          docker login --username  ${{ vars.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Pull the Image
        run: |
          docker pull ${{ env.DOCKERHUB_IMAGE_OLD }}

      - name: Tag the Images
        run: |
          echo "Tagging the image ${{ env.DOCKERHUB_IMAGE_OLD }} as ${{ env.DOCKERHUB_IMAGE_NEW }} and "
          docker tag ${{ env.DOCKERHUB_IMAGE_OLD }} ${{ env.DOCKERHUB_IMAGE_NEW }}
          docker tag ${{ env.DOCKERHUB_IMAGE_OLD }} ${{ env.DOCKERHUB_IMAGE_LATEST }}
          

      - name: Push the Images
        run: |
          echo "Pushing the image ${{ env.DOCKERHUB_IMAGE_NEW }} and ${{ env.DOCKERHUB_IMAGE_LATEST }}"
          docker push ${{ env.DOCKERHUB_IMAGE_NEW }}
          docker push ${{ env.DOCKERHUB_IMAGE_LATEST }}

